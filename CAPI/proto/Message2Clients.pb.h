// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message2Clients_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message2Clients_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
#include "Message2Server.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message2Clients_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message2Clients_2eproto
{
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Clients_2eproto;
namespace protobuf
{
    class BoolRes;
    struct BoolResDefaultTypeInternal;
    extern BoolResDefaultTypeInternal _BoolRes_default_instance_;
    class MessageOfButcher;
    struct MessageOfButcherDefaultTypeInternal;
    extern MessageOfButcherDefaultTypeInternal _MessageOfButcher_default_instance_;
    class MessageOfHuman;
    struct MessageOfHumanDefaultTypeInternal;
    extern MessageOfHumanDefaultTypeInternal _MessageOfHuman_default_instance_;
    class MessageOfMap;
    struct MessageOfMapDefaultTypeInternal;
    extern MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
    class MessageOfMap_Row;
    struct MessageOfMap_RowDefaultTypeInternal;
    extern MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
    class MessageOfPickedProp;
    struct MessageOfPickedPropDefaultTypeInternal;
    extern MessageOfPickedPropDefaultTypeInternal _MessageOfPickedProp_default_instance_;
    class MessageOfProp;
    struct MessageOfPropDefaultTypeInternal;
    extern MessageOfPropDefaultTypeInternal _MessageOfProp_default_instance_;
    class MessageToClient;
    struct MessageToClientDefaultTypeInternal;
    extern MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
    class MoveRes;
    struct MoveResDefaultTypeInternal;
    extern MoveResDefaultTypeInternal _MoveRes_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
::protobuf::BoolRes* Arena::CreateMaybeMessage<::protobuf::BoolRes>(Arena*);
template<>
::protobuf::MessageOfButcher* Arena::CreateMaybeMessage<::protobuf::MessageOfButcher>(Arena*);
template<>
::protobuf::MessageOfHuman* Arena::CreateMaybeMessage<::protobuf::MessageOfHuman>(Arena*);
template<>
::protobuf::MessageOfMap* Arena::CreateMaybeMessage<::protobuf::MessageOfMap>(Arena*);
template<>
::protobuf::MessageOfMap_Row* Arena::CreateMaybeMessage<::protobuf::MessageOfMap_Row>(Arena*);
template<>
::protobuf::MessageOfPickedProp* Arena::CreateMaybeMessage<::protobuf::MessageOfPickedProp>(Arena*);
template<>
::protobuf::MessageOfProp* Arena::CreateMaybeMessage<::protobuf::MessageOfProp>(Arena*);
template<>
::protobuf::MessageToClient* Arena::CreateMaybeMessage<::protobuf::MessageToClient>(Arena*);
template<>
::protobuf::MoveRes* Arena::CreateMaybeMessage<::protobuf::MoveRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf
{

    // ===================================================================

    class MessageOfHuman final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfHuman) */
    {
    public:
        inline MessageOfHuman() :
            MessageOfHuman(nullptr)
        {
        }
        ~MessageOfHuman() override;
        explicit constexpr MessageOfHuman(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfHuman(const MessageOfHuman& from);
        MessageOfHuman(MessageOfHuman&& from) noexcept
            :
            MessageOfHuman()
        {
            *this = ::std::move(from);
        }

        inline MessageOfHuman& operator=(const MessageOfHuman& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfHuman& operator=(MessageOfHuman&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfHuman& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfHuman* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfHuman*>(
                &_MessageOfHuman_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(MessageOfHuman& a, MessageOfHuman& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfHuman* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfHuman* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfHuman* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfHuman>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfHuman& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfHuman& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfHuman* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfHuman";
        }

    protected:
        explicit MessageOfHuman(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kBuffFieldNumber = 17,
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kSpeedFieldNumber = 3,
            kLifeFieldNumber = 4,
            kTimeUntilSkillAvailableFieldNumber = 6,
            kHangedTimeFieldNumber = 5,
            kPlaceFieldNumber = 7,
            kPropFieldNumber = 8,
            kHumanTypeFieldNumber = 9,
            kGuidFieldNumber = 10,
            kChairTimeFieldNumber = 12,
            kOnChairFieldNumber = 11,
            kOnGroundFieldNumber = 13,
            kViewRangeFieldNumber = 16,
            kGroundTimeFieldNumber = 14,
            kPlayerIdFieldNumber = 15,
        };
        // repeated .protobuf.HumanBuffType buff = 17;
        int buff_size() const;

    private:
        int _internal_buff_size() const;

    public:
        void clear_buff();

    private:
        ::protobuf::HumanBuffType _internal_buff(int index) const;
        void _internal_add_buff(::protobuf::HumanBuffType value);
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_buff();

    public:
        ::protobuf::HumanBuffType buff(int index) const;
        void set_buff(int index, ::protobuf::HumanBuffType value);
        void add_buff(::protobuf::HumanBuffType value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& buff() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_buff();

        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int32 speed = 3;
        void clear_speed();
        int32_t speed() const;
        void set_speed(int32_t value);

    private:
        int32_t _internal_speed() const;
        void _internal_set_speed(int32_t value);

    public:
        // int32 life = 4;
        void clear_life();
        int32_t life() const;
        void set_life(int32_t value);

    private:
        int32_t _internal_life() const;
        void _internal_set_life(int32_t value);

    public:
        // double time_until_skill_available = 6;
        void clear_time_until_skill_available();
        double time_until_skill_available() const;
        void set_time_until_skill_available(double value);

    private:
        double _internal_time_until_skill_available() const;
        void _internal_set_time_until_skill_available(double value);

    public:
        // int32 hanged_time = 5;
        void clear_hanged_time();
        int32_t hanged_time() const;
        void set_hanged_time(int32_t value);

    private:
        int32_t _internal_hanged_time() const;
        void _internal_set_hanged_time(int32_t value);

    public:
        // .protobuf.PlaceType place = 7;
        void clear_place();
        ::protobuf::PlaceType place() const;
        void set_place(::protobuf::PlaceType value);

    private:
        ::protobuf::PlaceType _internal_place() const;
        void _internal_set_place(::protobuf::PlaceType value);

    public:
        // .protobuf.PropType prop = 8;
        void clear_prop();
        ::protobuf::PropType prop() const;
        void set_prop(::protobuf::PropType value);

    private:
        ::protobuf::PropType _internal_prop() const;
        void _internal_set_prop(::protobuf::PropType value);

    public:
        // .protobuf.HumanType human_type = 9;
        void clear_human_type();
        ::protobuf::HumanType human_type() const;
        void set_human_type(::protobuf::HumanType value);

    private:
        ::protobuf::HumanType _internal_human_type() const;
        void _internal_set_human_type(::protobuf::HumanType value);

    public:
        // int64 guid = 10;
        void clear_guid();
        int64_t guid() const;
        void set_guid(int64_t value);

    private:
        int64_t _internal_guid() const;
        void _internal_set_guid(int64_t value);

    public:
        // double chair_time = 12;
        void clear_chair_time();
        double chair_time() const;
        void set_chair_time(double value);

    private:
        double _internal_chair_time() const;
        void _internal_set_chair_time(double value);

    public:
        // bool on_chair = 11;
        void clear_on_chair();
        bool on_chair() const;
        void set_on_chair(bool value);

    private:
        bool _internal_on_chair() const;
        void _internal_set_on_chair(bool value);

    public:
        // bool on_ground = 13;
        void clear_on_ground();
        bool on_ground() const;
        void set_on_ground(bool value);

    private:
        bool _internal_on_ground() const;
        void _internal_set_on_ground(bool value);

    public:
        // int32 view_range = 16;
        void clear_view_range();
        int32_t view_range() const;
        void set_view_range(int32_t value);

    private:
        int32_t _internal_view_range() const;
        void _internal_set_view_range(int32_t value);

    public:
        // double ground_time = 14;
        void clear_ground_time();
        double ground_time() const;
        void set_ground_time(double value);

    private:
        double _internal_ground_time() const;
        void _internal_set_ground_time(double value);

    public:
        // int64 player_id = 15;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfHuman)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> buff_;
        mutable std::atomic<int> _buff_cached_byte_size_;
        int32_t x_;
        int32_t y_;
        int32_t speed_;
        int32_t life_;
        double time_until_skill_available_;
        int32_t hanged_time_;
        int place_;
        int prop_;
        int human_type_;
        int64_t guid_;
        double chair_time_;
        bool on_chair_;
        bool on_ground_;
        int32_t view_range_;
        double ground_time_;
        int64_t player_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfButcher final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfButcher) */
    {
    public:
        inline MessageOfButcher() :
            MessageOfButcher(nullptr)
        {
        }
        ~MessageOfButcher() override;
        explicit constexpr MessageOfButcher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfButcher(const MessageOfButcher& from);
        MessageOfButcher(MessageOfButcher&& from) noexcept
            :
            MessageOfButcher()
        {
            *this = ::std::move(from);
        }

        inline MessageOfButcher& operator=(const MessageOfButcher& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfButcher& operator=(MessageOfButcher&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfButcher& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfButcher* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfButcher*>(
                &_MessageOfButcher_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(MessageOfButcher& a, MessageOfButcher& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfButcher* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfButcher* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfButcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfButcher>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfButcher& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfButcher& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfButcher* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfButcher";
        }

    protected:
        explicit MessageOfButcher(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kBuffFieldNumber = 13,
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kSpeedFieldNumber = 3,
            kDamageFieldNumber = 4,
            kTimeUntilSkillAvailableFieldNumber = 5,
            kPlaceFieldNumber = 6,
            kPropFieldNumber = 7,
            kGuidFieldNumber = 9,
            kButcherTypeFieldNumber = 8,
            kMovableFieldNumber = 10,
            kPlayerIDFieldNumber = 11,
            kViewRangeFieldNumber = 12,
        };
        // repeated .protobuf.ButcherBuffType buff = 13;
        int buff_size() const;

    private:
        int _internal_buff_size() const;

    public:
        void clear_buff();

    private:
        ::protobuf::ButcherBuffType _internal_buff(int index) const;
        void _internal_add_buff(::protobuf::ButcherBuffType value);
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_buff();

    public:
        ::protobuf::ButcherBuffType buff(int index) const;
        void set_buff(int index, ::protobuf::ButcherBuffType value);
        void add_buff(::protobuf::ButcherBuffType value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& buff() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_buff();

        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int32 speed = 3;
        void clear_speed();
        int32_t speed() const;
        void set_speed(int32_t value);

    private:
        int32_t _internal_speed() const;
        void _internal_set_speed(int32_t value);

    public:
        // int32 damage = 4;
        void clear_damage();
        int32_t damage() const;
        void set_damage(int32_t value);

    private:
        int32_t _internal_damage() const;
        void _internal_set_damage(int32_t value);

    public:
        // double time_until_skill_available = 5;
        void clear_time_until_skill_available();
        double time_until_skill_available() const;
        void set_time_until_skill_available(double value);

    private:
        double _internal_time_until_skill_available() const;
        void _internal_set_time_until_skill_available(double value);

    public:
        // .protobuf.PlaceType place = 6;
        void clear_place();
        ::protobuf::PlaceType place() const;
        void set_place(::protobuf::PlaceType value);

    private:
        ::protobuf::PlaceType _internal_place() const;
        void _internal_set_place(::protobuf::PlaceType value);

    public:
        // .protobuf.PropType prop = 7;
        void clear_prop();
        ::protobuf::PropType prop() const;
        void set_prop(::protobuf::PropType value);

    private:
        ::protobuf::PropType _internal_prop() const;
        void _internal_set_prop(::protobuf::PropType value);

    public:
        // int64 guid = 9;
        void clear_guid();
        int64_t guid() const;
        void set_guid(int64_t value);

    private:
        int64_t _internal_guid() const;
        void _internal_set_guid(int64_t value);

    public:
        // .protobuf.ButcherType butcher_type = 8;
        void clear_butcher_type();
        ::protobuf::ButcherType butcher_type() const;
        void set_butcher_type(::protobuf::ButcherType value);

    private:
        ::protobuf::ButcherType _internal_butcher_type() const;
        void _internal_set_butcher_type(::protobuf::ButcherType value);

    public:
        // bool movable = 10;
        void clear_movable();
        bool movable() const;
        void set_movable(bool value);

    private:
        bool _internal_movable() const;
        void _internal_set_movable(bool value);

    public:
        // int64 playerID = 11;
        void clear_playerid();
        int64_t playerid() const;
        void set_playerid(int64_t value);

    private:
        int64_t _internal_playerid() const;
        void _internal_set_playerid(int64_t value);

    public:
        // int32 view_range = 12;
        void clear_view_range();
        int32_t view_range() const;
        void set_view_range(int32_t value);

    private:
        int32_t _internal_view_range() const;
        void _internal_set_view_range(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfButcher)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> buff_;
        mutable std::atomic<int> _buff_cached_byte_size_;
        int32_t x_;
        int32_t y_;
        int32_t speed_;
        int32_t damage_;
        double time_until_skill_available_;
        int place_;
        int prop_;
        int64_t guid_;
        int butcher_type_;
        bool movable_;
        int64_t playerid_;
        int32_t view_range_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfProp final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfProp) */
    {
    public:
        inline MessageOfProp() :
            MessageOfProp(nullptr)
        {
        }
        ~MessageOfProp() override;
        explicit constexpr MessageOfProp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfProp(const MessageOfProp& from);
        MessageOfProp(MessageOfProp&& from) noexcept
            :
            MessageOfProp()
        {
            *this = ::std::move(from);
        }

        inline MessageOfProp& operator=(const MessageOfProp& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfProp& operator=(MessageOfProp&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfProp& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfProp* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfProp*>(
                &_MessageOfProp_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(MessageOfProp& a, MessageOfProp& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfProp* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfProp* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfProp>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfProp& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfProp& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfProp* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfProp";
        }

    protected:
        explicit MessageOfProp(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kTypeFieldNumber = 1,
            kXFieldNumber = 2,
            kFacingDirectionFieldNumber = 4,
            kYFieldNumber = 3,
            kPlaceFieldNumber = 6,
            kGuidFieldNumber = 5,
        };
        // .protobuf.PropType type = 1;
        void clear_type();
        ::protobuf::PropType type() const;
        void set_type(::protobuf::PropType value);

    private:
        ::protobuf::PropType _internal_type() const;
        void _internal_set_type(::protobuf::PropType value);

    public:
        // int32 x = 2;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // double facing_direction = 4;
        void clear_facing_direction();
        double facing_direction() const;
        void set_facing_direction(double value);

    private:
        double _internal_facing_direction() const;
        void _internal_set_facing_direction(double value);

    public:
        // int32 y = 3;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // .protobuf.PlaceType place = 6;
        void clear_place();
        ::protobuf::PlaceType place() const;
        void set_place(::protobuf::PlaceType value);

    private:
        ::protobuf::PlaceType _internal_place() const;
        void _internal_set_place(::protobuf::PlaceType value);

    public:
        // int64 guid = 5;
        void clear_guid();
        int64_t guid() const;
        void set_guid(int64_t value);

    private:
        int64_t _internal_guid() const;
        void _internal_set_guid(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfProp)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int type_;
        int32_t x_;
        double facing_direction_;
        int32_t y_;
        int place_;
        int64_t guid_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfPickedProp final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfPickedProp) */
    {
    public:
        inline MessageOfPickedProp() :
            MessageOfPickedProp(nullptr)
        {
        }
        ~MessageOfPickedProp() override;
        explicit constexpr MessageOfPickedProp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfPickedProp(const MessageOfPickedProp& from);
        MessageOfPickedProp(MessageOfPickedProp&& from) noexcept
            :
            MessageOfPickedProp()
        {
            *this = ::std::move(from);
        }

        inline MessageOfPickedProp& operator=(const MessageOfPickedProp& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfPickedProp& operator=(MessageOfPickedProp&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfPickedProp& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfPickedProp* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfPickedProp*>(
                &_MessageOfPickedProp_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            3;

        friend void swap(MessageOfPickedProp& a, MessageOfPickedProp& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfPickedProp* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfPickedProp* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfPickedProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfPickedProp>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfPickedProp& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfPickedProp& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfPickedProp* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfPickedProp";
        }

    protected:
        explicit MessageOfPickedProp(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kTypeFieldNumber = 1,
            kXFieldNumber = 2,
            kFacingDirectionFieldNumber = 4,
            kMappingIdFieldNumber = 5,
            kYFieldNumber = 3,
        };
        // .protobuf.PropType type = 1;
        void clear_type();
        ::protobuf::PropType type() const;
        void set_type(::protobuf::PropType value);

    private:
        ::protobuf::PropType _internal_type() const;
        void _internal_set_type(::protobuf::PropType value);

    public:
        // int32 x = 2;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // double facing_direction = 4;
        void clear_facing_direction();
        double facing_direction() const;
        void set_facing_direction(double value);

    private:
        double _internal_facing_direction() const;
        void _internal_set_facing_direction(double value);

    public:
        // int64 mapping_id = 5;
        void clear_mapping_id();
        int64_t mapping_id() const;
        void set_mapping_id(int64_t value);

    private:
        int64_t _internal_mapping_id() const;
        void _internal_set_mapping_id(int64_t value);

    public:
        // int32 y = 3;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MessageOfPickedProp)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int type_;
        int32_t x_;
        double facing_direction_;
        int64_t mapping_id_;
        int32_t y_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfMap_Row final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfMap.Row) */
    {
    public:
        inline MessageOfMap_Row() :
            MessageOfMap_Row(nullptr)
        {
        }
        ~MessageOfMap_Row() override;
        explicit constexpr MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfMap_Row(const MessageOfMap_Row& from);
        MessageOfMap_Row(MessageOfMap_Row&& from) noexcept
            :
            MessageOfMap_Row()
        {
            *this = ::std::move(from);
        }

        inline MessageOfMap_Row& operator=(const MessageOfMap_Row& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfMap_Row& operator=(MessageOfMap_Row&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfMap_Row& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfMap_Row* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfMap_Row*>(
                &_MessageOfMap_Row_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            4;

        friend void swap(MessageOfMap_Row& a, MessageOfMap_Row& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfMap_Row* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfMap_Row* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfMap_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfMap_Row>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfMap_Row& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfMap_Row& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfMap_Row* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfMap.Row";
        }

    protected:
        explicit MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kColFieldNumber = 1,
        };
        // repeated .protobuf.PlaceType col = 1;
        int col_size() const;

    private:
        int _internal_col_size() const;

    public:
        void clear_col();

    private:
        ::protobuf::PlaceType _internal_col(int index) const;
        void _internal_add_col(::protobuf::PlaceType value);
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_col();

    public:
        ::protobuf::PlaceType col(int index) const;
        void set_col(int index, ::protobuf::PlaceType value);
        void add_col(::protobuf::PlaceType value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& col() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_col();

        // @@protoc_insertion_point(class_scope:protobuf.MessageOfMap.Row)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> col_;
        mutable std::atomic<int> _col_cached_byte_size_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageOfMap final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageOfMap) */
    {
    public:
        inline MessageOfMap() :
            MessageOfMap(nullptr)
        {
        }
        ~MessageOfMap() override;
        explicit constexpr MessageOfMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageOfMap(const MessageOfMap& from);
        MessageOfMap(MessageOfMap&& from) noexcept
            :
            MessageOfMap()
        {
            *this = ::std::move(from);
        }

        inline MessageOfMap& operator=(const MessageOfMap& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageOfMap& operator=(MessageOfMap&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageOfMap& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageOfMap* internal_default_instance()
        {
            return reinterpret_cast<const MessageOfMap*>(
                &_MessageOfMap_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            5;

        friend void swap(MessageOfMap& a, MessageOfMap& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageOfMap* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageOfMap* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageOfMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageOfMap>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageOfMap& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageOfMap& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageOfMap* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageOfMap";
        }

    protected:
        explicit MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        typedef MessageOfMap_Row Row;

        // accessors -------------------------------------------------------

        enum : int
        {
            kRowFieldNumber = 2,
        };
        // repeated .protobuf.MessageOfMap.Row row = 2;
        int row_size() const;

    private:
        int _internal_row_size() const;

    public:
        void clear_row();
        ::protobuf::MessageOfMap_Row* mutable_row(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>*
            mutable_row();

    private:
        const ::protobuf::MessageOfMap_Row& _internal_row(int index) const;
        ::protobuf::MessageOfMap_Row* _internal_add_row();

    public:
        const ::protobuf::MessageOfMap_Row& row(int index) const;
        ::protobuf::MessageOfMap_Row* add_row();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>&
            row() const;

        // @@protoc_insertion_point(class_scope:protobuf.MessageOfMap)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row> row_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MessageToClient final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MessageToClient) */
    {
    public:
        inline MessageToClient() :
            MessageToClient(nullptr)
        {
        }
        ~MessageToClient() override;
        explicit constexpr MessageToClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MessageToClient(const MessageToClient& from);
        MessageToClient(MessageToClient&& from) noexcept
            :
            MessageToClient()
        {
            *this = ::std::move(from);
        }

        inline MessageToClient& operator=(const MessageToClient& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MessageToClient& operator=(MessageToClient&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MessageToClient& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MessageToClient* internal_default_instance()
        {
            return reinterpret_cast<const MessageToClient*>(
                &_MessageToClient_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            6;

        friend void swap(MessageToClient& a, MessageToClient& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MessageToClient* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MessageToClient* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MessageToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MessageToClient>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MessageToClient& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MessageToClient& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MessageToClient* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MessageToClient";
        }

    protected:
        explicit MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kHumanMessageFieldNumber = 1,
            kButcherMessageFieldNumber = 2,
            kPropMessageFieldNumber = 3,
            kMapMassageFieldNumber = 4,
        };
        // repeated .protobuf.MessageOfHuman human_message = 1;
        int human_message_size() const;

    private:
        int _internal_human_message_size() const;

    public:
        void clear_human_message();
        ::protobuf::MessageOfHuman* mutable_human_message(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfHuman>*
            mutable_human_message();

    private:
        const ::protobuf::MessageOfHuman& _internal_human_message(int index) const;
        ::protobuf::MessageOfHuman* _internal_add_human_message();

    public:
        const ::protobuf::MessageOfHuman& human_message(int index) const;
        ::protobuf::MessageOfHuman* add_human_message();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfHuman>&
            human_message() const;

        // repeated .protobuf.MessageOfButcher butcher_message = 2;
        int butcher_message_size() const;

    private:
        int _internal_butcher_message_size() const;

    public:
        void clear_butcher_message();
        ::protobuf::MessageOfButcher* mutable_butcher_message(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfButcher>*
            mutable_butcher_message();

    private:
        const ::protobuf::MessageOfButcher& _internal_butcher_message(int index) const;
        ::protobuf::MessageOfButcher* _internal_add_butcher_message();

    public:
        const ::protobuf::MessageOfButcher& butcher_message(int index) const;
        ::protobuf::MessageOfButcher* add_butcher_message();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfButcher>&
            butcher_message() const;

        // repeated .protobuf.MessageOfProp prop_message = 3;
        int prop_message_size() const;

    private:
        int _internal_prop_message_size() const;

    public:
        void clear_prop_message();
        ::protobuf::MessageOfProp* mutable_prop_message(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfProp>*
            mutable_prop_message();

    private:
        const ::protobuf::MessageOfProp& _internal_prop_message(int index) const;
        ::protobuf::MessageOfProp* _internal_add_prop_message();

    public:
        const ::protobuf::MessageOfProp& prop_message(int index) const;
        ::protobuf::MessageOfProp* add_prop_message();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfProp>&
            prop_message() const;

        // .protobuf.MessageOfMap map_massage = 4;
        bool has_map_massage() const;

    private:
        bool _internal_has_map_massage() const;

    public:
        void clear_map_massage();
        const ::protobuf::MessageOfMap& map_massage() const;
        PROTOBUF_NODISCARD ::protobuf::MessageOfMap* release_map_massage();
        ::protobuf::MessageOfMap* mutable_map_massage();
        void set_allocated_map_massage(::protobuf::MessageOfMap* map_massage);

    private:
        const ::protobuf::MessageOfMap& _internal_map_massage() const;
        ::protobuf::MessageOfMap* _internal_mutable_map_massage();

    public:
        void unsafe_arena_set_allocated_map_massage(
            ::protobuf::MessageOfMap* map_massage
        );
        ::protobuf::MessageOfMap* unsafe_arena_release_map_massage();

        // @@protoc_insertion_point(class_scope:protobuf.MessageToClient)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfHuman> human_message_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfButcher> butcher_message_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfProp> prop_message_;
        ::protobuf::MessageOfMap* map_massage_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class MoveRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MoveRes) */
    {
    public:
        inline MoveRes() :
            MoveRes(nullptr)
        {
        }
        ~MoveRes() override;
        explicit constexpr MoveRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MoveRes(const MoveRes& from);
        MoveRes(MoveRes&& from) noexcept
            :
            MoveRes()
        {
            *this = ::std::move(from);
        }

        inline MoveRes& operator=(const MoveRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MoveRes& operator=(MoveRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MoveRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MoveRes* internal_default_instance()
        {
            return reinterpret_cast<const MoveRes*>(
                &_MoveRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            7;

        friend void swap(MoveRes& a, MoveRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MoveRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MoveRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MoveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MoveRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MoveRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MoveRes& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MoveRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MoveRes";
        }

    protected:
        explicit MoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kActualSpeedFieldNumber = 1,
            kActualAngleFieldNumber = 2,
        };
        // int64 actual_speed = 1;
        void clear_actual_speed();
        int64_t actual_speed() const;
        void set_actual_speed(int64_t value);

    private:
        int64_t _internal_actual_speed() const;
        void _internal_set_actual_speed(int64_t value);

    public:
        // double actual_angle = 2;
        void clear_actual_angle();
        double actual_angle() const;
        void set_actual_angle(double value);

    private:
        double _internal_actual_angle() const;
        void _internal_set_actual_angle(double value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MoveRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t actual_speed_;
        double actual_angle_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // -------------------------------------------------------------------

    class BoolRes final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BoolRes) */
    {
    public:
        inline BoolRes() :
            BoolRes(nullptr)
        {
        }
        ~BoolRes() override;
        explicit constexpr BoolRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BoolRes(const BoolRes& from);
        BoolRes(BoolRes&& from) noexcept
            :
            BoolRes()
        {
            *this = ::std::move(from);
        }

        inline BoolRes& operator=(const BoolRes& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BoolRes& operator=(BoolRes&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BoolRes& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BoolRes* internal_default_instance()
        {
            return reinterpret_cast<const BoolRes*>(
                &_BoolRes_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            8;

        friend void swap(BoolRes& a, BoolRes& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BoolRes* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BoolRes* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BoolRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BoolRes>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BoolRes& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BoolRes& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BoolRes* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BoolRes";
        }

    protected:
        explicit BoolRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kActSuccessFieldNumber = 1,
        };
        // bool act_success = 1;
        void clear_act_success();
        bool act_success() const;
        void set_act_success(bool value);

    private:
        bool _internal_act_success() const;
        void _internal_set_act_success(bool value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BoolRes)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        bool act_success_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Clients_2eproto;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
    // MessageOfHuman

    // int32 x = 1;
    inline void MessageOfHuman::clear_x()
    {
        x_ = 0;
    }
    inline int32_t MessageOfHuman::_internal_x() const
    {
        return x_;
    }
    inline int32_t MessageOfHuman::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.x)
        return _internal_x();
    }
    inline void MessageOfHuman::_internal_set_x(int32_t value)
    {
        x_ = value;
    }
    inline void MessageOfHuman::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.x)
    }

    // int32 y = 2;
    inline void MessageOfHuman::clear_y()
    {
        y_ = 0;
    }
    inline int32_t MessageOfHuman::_internal_y() const
    {
        return y_;
    }
    inline int32_t MessageOfHuman::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.y)
        return _internal_y();
    }
    inline void MessageOfHuman::_internal_set_y(int32_t value)
    {
        y_ = value;
    }
    inline void MessageOfHuman::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.y)
    }

    // int32 speed = 3;
    inline void MessageOfHuman::clear_speed()
    {
        speed_ = 0;
    }
    inline int32_t MessageOfHuman::_internal_speed() const
    {
        return speed_;
    }
    inline int32_t MessageOfHuman::speed() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.speed)
        return _internal_speed();
    }
    inline void MessageOfHuman::_internal_set_speed(int32_t value)
    {
        speed_ = value;
    }
    inline void MessageOfHuman::set_speed(int32_t value)
    {
        _internal_set_speed(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.speed)
    }

    // int32 life = 4;
    inline void MessageOfHuman::clear_life()
    {
        life_ = 0;
    }
    inline int32_t MessageOfHuman::_internal_life() const
    {
        return life_;
    }
    inline int32_t MessageOfHuman::life() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.life)
        return _internal_life();
    }
    inline void MessageOfHuman::_internal_set_life(int32_t value)
    {
        life_ = value;
    }
    inline void MessageOfHuman::set_life(int32_t value)
    {
        _internal_set_life(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.life)
    }

    // int32 hanged_time = 5;
    inline void MessageOfHuman::clear_hanged_time()
    {
        hanged_time_ = 0;
    }
    inline int32_t MessageOfHuman::_internal_hanged_time() const
    {
        return hanged_time_;
    }
    inline int32_t MessageOfHuman::hanged_time() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.hanged_time)
        return _internal_hanged_time();
    }
    inline void MessageOfHuman::_internal_set_hanged_time(int32_t value)
    {
        hanged_time_ = value;
    }
    inline void MessageOfHuman::set_hanged_time(int32_t value)
    {
        _internal_set_hanged_time(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.hanged_time)
    }

    // double time_until_skill_available = 6;
    inline void MessageOfHuman::clear_time_until_skill_available()
    {
        time_until_skill_available_ = 0;
    }
    inline double MessageOfHuman::_internal_time_until_skill_available() const
    {
        return time_until_skill_available_;
    }
    inline double MessageOfHuman::time_until_skill_available() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.time_until_skill_available)
        return _internal_time_until_skill_available();
    }
    inline void MessageOfHuman::_internal_set_time_until_skill_available(double value)
    {
        time_until_skill_available_ = value;
    }
    inline void MessageOfHuman::set_time_until_skill_available(double value)
    {
        _internal_set_time_until_skill_available(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.time_until_skill_available)
    }

    // .protobuf.PlaceType place = 7;
    inline void MessageOfHuman::clear_place()
    {
        place_ = 0;
    }
    inline ::protobuf::PlaceType MessageOfHuman::_internal_place() const
    {
        return static_cast<::protobuf::PlaceType>(place_);
    }
    inline ::protobuf::PlaceType MessageOfHuman::place() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.place)
        return _internal_place();
    }
    inline void MessageOfHuman::_internal_set_place(::protobuf::PlaceType value)
    {
        place_ = value;
    }
    inline void MessageOfHuman::set_place(::protobuf::PlaceType value)
    {
        _internal_set_place(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.place)
    }

    // .protobuf.PropType prop = 8;
    inline void MessageOfHuman::clear_prop()
    {
        prop_ = 0;
    }
    inline ::protobuf::PropType MessageOfHuman::_internal_prop() const
    {
        return static_cast<::protobuf::PropType>(prop_);
    }
    inline ::protobuf::PropType MessageOfHuman::prop() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.prop)
        return _internal_prop();
    }
    inline void MessageOfHuman::_internal_set_prop(::protobuf::PropType value)
    {
        prop_ = value;
    }
    inline void MessageOfHuman::set_prop(::protobuf::PropType value)
    {
        _internal_set_prop(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.prop)
    }

    // .protobuf.HumanType human_type = 9;
    inline void MessageOfHuman::clear_human_type()
    {
        human_type_ = 0;
    }
    inline ::protobuf::HumanType MessageOfHuman::_internal_human_type() const
    {
        return static_cast<::protobuf::HumanType>(human_type_);
    }
    inline ::protobuf::HumanType MessageOfHuman::human_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.human_type)
        return _internal_human_type();
    }
    inline void MessageOfHuman::_internal_set_human_type(::protobuf::HumanType value)
    {
        human_type_ = value;
    }
    inline void MessageOfHuman::set_human_type(::protobuf::HumanType value)
    {
        _internal_set_human_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.human_type)
    }

    // int64 guid = 10;
    inline void MessageOfHuman::clear_guid()
    {
        guid_ = int64_t{0};
    }
    inline int64_t MessageOfHuman::_internal_guid() const
    {
        return guid_;
    }
    inline int64_t MessageOfHuman::guid() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.guid)
        return _internal_guid();
    }
    inline void MessageOfHuman::_internal_set_guid(int64_t value)
    {
        guid_ = value;
    }
    inline void MessageOfHuman::set_guid(int64_t value)
    {
        _internal_set_guid(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.guid)
    }

    // bool on_chair = 11;
    inline void MessageOfHuman::clear_on_chair()
    {
        on_chair_ = false;
    }
    inline bool MessageOfHuman::_internal_on_chair() const
    {
        return on_chair_;
    }
    inline bool MessageOfHuman::on_chair() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.on_chair)
        return _internal_on_chair();
    }
    inline void MessageOfHuman::_internal_set_on_chair(bool value)
    {
        on_chair_ = value;
    }
    inline void MessageOfHuman::set_on_chair(bool value)
    {
        _internal_set_on_chair(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.on_chair)
    }

    // double chair_time = 12;
    inline void MessageOfHuman::clear_chair_time()
    {
        chair_time_ = 0;
    }
    inline double MessageOfHuman::_internal_chair_time() const
    {
        return chair_time_;
    }
    inline double MessageOfHuman::chair_time() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.chair_time)
        return _internal_chair_time();
    }
    inline void MessageOfHuman::_internal_set_chair_time(double value)
    {
        chair_time_ = value;
    }
    inline void MessageOfHuman::set_chair_time(double value)
    {
        _internal_set_chair_time(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.chair_time)
    }

    // bool on_ground = 13;
    inline void MessageOfHuman::clear_on_ground()
    {
        on_ground_ = false;
    }
    inline bool MessageOfHuman::_internal_on_ground() const
    {
        return on_ground_;
    }
    inline bool MessageOfHuman::on_ground() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.on_ground)
        return _internal_on_ground();
    }
    inline void MessageOfHuman::_internal_set_on_ground(bool value)
    {
        on_ground_ = value;
    }
    inline void MessageOfHuman::set_on_ground(bool value)
    {
        _internal_set_on_ground(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.on_ground)
    }

    // double ground_time = 14;
    inline void MessageOfHuman::clear_ground_time()
    {
        ground_time_ = 0;
    }
    inline double MessageOfHuman::_internal_ground_time() const
    {
        return ground_time_;
    }
    inline double MessageOfHuman::ground_time() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.ground_time)
        return _internal_ground_time();
    }
    inline void MessageOfHuman::_internal_set_ground_time(double value)
    {
        ground_time_ = value;
    }
    inline void MessageOfHuman::set_ground_time(double value)
    {
        _internal_set_ground_time(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.ground_time)
    }

    // int64 player_id = 15;
    inline void MessageOfHuman::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t MessageOfHuman::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t MessageOfHuman::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.player_id)
        return _internal_player_id();
    }
    inline void MessageOfHuman::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void MessageOfHuman::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.player_id)
    }

    // int32 view_range = 16;
    inline void MessageOfHuman::clear_view_range()
    {
        view_range_ = 0;
    }
    inline int32_t MessageOfHuman::_internal_view_range() const
    {
        return view_range_;
    }
    inline int32_t MessageOfHuman::view_range() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.view_range)
        return _internal_view_range();
    }
    inline void MessageOfHuman::_internal_set_view_range(int32_t value)
    {
        view_range_ = value;
    }
    inline void MessageOfHuman::set_view_range(int32_t value)
    {
        _internal_set_view_range(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.view_range)
    }

    // repeated .protobuf.HumanBuffType buff = 17;
    inline int MessageOfHuman::_internal_buff_size() const
    {
        return buff_.size();
    }
    inline int MessageOfHuman::buff_size() const
    {
        return _internal_buff_size();
    }
    inline void MessageOfHuman::clear_buff()
    {
        buff_.Clear();
    }
    inline ::protobuf::HumanBuffType MessageOfHuman::_internal_buff(int index) const
    {
        return static_cast<::protobuf::HumanBuffType>(buff_.Get(index));
    }
    inline ::protobuf::HumanBuffType MessageOfHuman::buff(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfHuman.buff)
        return _internal_buff(index);
    }
    inline void MessageOfHuman::set_buff(int index, ::protobuf::HumanBuffType value)
    {
        buff_.Set(index, value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfHuman.buff)
    }
    inline void MessageOfHuman::_internal_add_buff(::protobuf::HumanBuffType value)
    {
        buff_.Add(value);
    }
    inline void MessageOfHuman::add_buff(::protobuf::HumanBuffType value)
    {
        _internal_add_buff(value);
        // @@protoc_insertion_point(field_add:protobuf.MessageOfHuman.buff)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
        MessageOfHuman::buff() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageOfHuman.buff)
        return buff_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfHuman::_internal_mutable_buff()
    {
        return &buff_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfHuman::mutable_buff()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageOfHuman.buff)
        return _internal_mutable_buff();
    }

    // -------------------------------------------------------------------

    // MessageOfButcher

    // int32 x = 1;
    inline void MessageOfButcher::clear_x()
    {
        x_ = 0;
    }
    inline int32_t MessageOfButcher::_internal_x() const
    {
        return x_;
    }
    inline int32_t MessageOfButcher::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.x)
        return _internal_x();
    }
    inline void MessageOfButcher::_internal_set_x(int32_t value)
    {
        x_ = value;
    }
    inline void MessageOfButcher::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.x)
    }

    // int32 y = 2;
    inline void MessageOfButcher::clear_y()
    {
        y_ = 0;
    }
    inline int32_t MessageOfButcher::_internal_y() const
    {
        return y_;
    }
    inline int32_t MessageOfButcher::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.y)
        return _internal_y();
    }
    inline void MessageOfButcher::_internal_set_y(int32_t value)
    {
        y_ = value;
    }
    inline void MessageOfButcher::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.y)
    }

    // int32 speed = 3;
    inline void MessageOfButcher::clear_speed()
    {
        speed_ = 0;
    }
    inline int32_t MessageOfButcher::_internal_speed() const
    {
        return speed_;
    }
    inline int32_t MessageOfButcher::speed() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.speed)
        return _internal_speed();
    }
    inline void MessageOfButcher::_internal_set_speed(int32_t value)
    {
        speed_ = value;
    }
    inline void MessageOfButcher::set_speed(int32_t value)
    {
        _internal_set_speed(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.speed)
    }

    // int32 damage = 4;
    inline void MessageOfButcher::clear_damage()
    {
        damage_ = 0;
    }
    inline int32_t MessageOfButcher::_internal_damage() const
    {
        return damage_;
    }
    inline int32_t MessageOfButcher::damage() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.damage)
        return _internal_damage();
    }
    inline void MessageOfButcher::_internal_set_damage(int32_t value)
    {
        damage_ = value;
    }
    inline void MessageOfButcher::set_damage(int32_t value)
    {
        _internal_set_damage(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.damage)
    }

    // double time_until_skill_available = 5;
    inline void MessageOfButcher::clear_time_until_skill_available()
    {
        time_until_skill_available_ = 0;
    }
    inline double MessageOfButcher::_internal_time_until_skill_available() const
    {
        return time_until_skill_available_;
    }
    inline double MessageOfButcher::time_until_skill_available() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.time_until_skill_available)
        return _internal_time_until_skill_available();
    }
    inline void MessageOfButcher::_internal_set_time_until_skill_available(double value)
    {
        time_until_skill_available_ = value;
    }
    inline void MessageOfButcher::set_time_until_skill_available(double value)
    {
        _internal_set_time_until_skill_available(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.time_until_skill_available)
    }

    // .protobuf.PlaceType place = 6;
    inline void MessageOfButcher::clear_place()
    {
        place_ = 0;
    }
    inline ::protobuf::PlaceType MessageOfButcher::_internal_place() const
    {
        return static_cast<::protobuf::PlaceType>(place_);
    }
    inline ::protobuf::PlaceType MessageOfButcher::place() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.place)
        return _internal_place();
    }
    inline void MessageOfButcher::_internal_set_place(::protobuf::PlaceType value)
    {
        place_ = value;
    }
    inline void MessageOfButcher::set_place(::protobuf::PlaceType value)
    {
        _internal_set_place(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.place)
    }

    // .protobuf.PropType prop = 7;
    inline void MessageOfButcher::clear_prop()
    {
        prop_ = 0;
    }
    inline ::protobuf::PropType MessageOfButcher::_internal_prop() const
    {
        return static_cast<::protobuf::PropType>(prop_);
    }
    inline ::protobuf::PropType MessageOfButcher::prop() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.prop)
        return _internal_prop();
    }
    inline void MessageOfButcher::_internal_set_prop(::protobuf::PropType value)
    {
        prop_ = value;
    }
    inline void MessageOfButcher::set_prop(::protobuf::PropType value)
    {
        _internal_set_prop(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.prop)
    }

    // .protobuf.ButcherType butcher_type = 8;
    inline void MessageOfButcher::clear_butcher_type()
    {
        butcher_type_ = 0;
    }
    inline ::protobuf::ButcherType MessageOfButcher::_internal_butcher_type() const
    {
        return static_cast<::protobuf::ButcherType>(butcher_type_);
    }
    inline ::protobuf::ButcherType MessageOfButcher::butcher_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.butcher_type)
        return _internal_butcher_type();
    }
    inline void MessageOfButcher::_internal_set_butcher_type(::protobuf::ButcherType value)
    {
        butcher_type_ = value;
    }
    inline void MessageOfButcher::set_butcher_type(::protobuf::ButcherType value)
    {
        _internal_set_butcher_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.butcher_type)
    }

    // int64 guid = 9;
    inline void MessageOfButcher::clear_guid()
    {
        guid_ = int64_t{0};
    }
    inline int64_t MessageOfButcher::_internal_guid() const
    {
        return guid_;
    }
    inline int64_t MessageOfButcher::guid() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.guid)
        return _internal_guid();
    }
    inline void MessageOfButcher::_internal_set_guid(int64_t value)
    {
        guid_ = value;
    }
    inline void MessageOfButcher::set_guid(int64_t value)
    {
        _internal_set_guid(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.guid)
    }

    // bool movable = 10;
    inline void MessageOfButcher::clear_movable()
    {
        movable_ = false;
    }
    inline bool MessageOfButcher::_internal_movable() const
    {
        return movable_;
    }
    inline bool MessageOfButcher::movable() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.movable)
        return _internal_movable();
    }
    inline void MessageOfButcher::_internal_set_movable(bool value)
    {
        movable_ = value;
    }
    inline void MessageOfButcher::set_movable(bool value)
    {
        _internal_set_movable(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.movable)
    }

    // int64 playerID = 11;
    inline void MessageOfButcher::clear_playerid()
    {
        playerid_ = int64_t{0};
    }
    inline int64_t MessageOfButcher::_internal_playerid() const
    {
        return playerid_;
    }
    inline int64_t MessageOfButcher::playerid() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.playerID)
        return _internal_playerid();
    }
    inline void MessageOfButcher::_internal_set_playerid(int64_t value)
    {
        playerid_ = value;
    }
    inline void MessageOfButcher::set_playerid(int64_t value)
    {
        _internal_set_playerid(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.playerID)
    }

    // int32 view_range = 12;
    inline void MessageOfButcher::clear_view_range()
    {
        view_range_ = 0;
    }
    inline int32_t MessageOfButcher::_internal_view_range() const
    {
        return view_range_;
    }
    inline int32_t MessageOfButcher::view_range() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.view_range)
        return _internal_view_range();
    }
    inline void MessageOfButcher::_internal_set_view_range(int32_t value)
    {
        view_range_ = value;
    }
    inline void MessageOfButcher::set_view_range(int32_t value)
    {
        _internal_set_view_range(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.view_range)
    }

    // repeated .protobuf.ButcherBuffType buff = 13;
    inline int MessageOfButcher::_internal_buff_size() const
    {
        return buff_.size();
    }
    inline int MessageOfButcher::buff_size() const
    {
        return _internal_buff_size();
    }
    inline void MessageOfButcher::clear_buff()
    {
        buff_.Clear();
    }
    inline ::protobuf::ButcherBuffType MessageOfButcher::_internal_buff(int index) const
    {
        return static_cast<::protobuf::ButcherBuffType>(buff_.Get(index));
    }
    inline ::protobuf::ButcherBuffType MessageOfButcher::buff(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfButcher.buff)
        return _internal_buff(index);
    }
    inline void MessageOfButcher::set_buff(int index, ::protobuf::ButcherBuffType value)
    {
        buff_.Set(index, value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfButcher.buff)
    }
    inline void MessageOfButcher::_internal_add_buff(::protobuf::ButcherBuffType value)
    {
        buff_.Add(value);
    }
    inline void MessageOfButcher::add_buff(::protobuf::ButcherBuffType value)
    {
        _internal_add_buff(value);
        // @@protoc_insertion_point(field_add:protobuf.MessageOfButcher.buff)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
        MessageOfButcher::buff() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageOfButcher.buff)
        return buff_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfButcher::_internal_mutable_buff()
    {
        return &buff_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfButcher::mutable_buff()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageOfButcher.buff)
        return _internal_mutable_buff();
    }

    // -------------------------------------------------------------------

    // MessageOfProp

    // .protobuf.PropType type = 1;
    inline void MessageOfProp::clear_type()
    {
        type_ = 0;
    }
    inline ::protobuf::PropType MessageOfProp::_internal_type() const
    {
        return static_cast<::protobuf::PropType>(type_);
    }
    inline ::protobuf::PropType MessageOfProp::type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfProp.type)
        return _internal_type();
    }
    inline void MessageOfProp::_internal_set_type(::protobuf::PropType value)
    {
        type_ = value;
    }
    inline void MessageOfProp::set_type(::protobuf::PropType value)
    {
        _internal_set_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfProp.type)
    }

    // int32 x = 2;
    inline void MessageOfProp::clear_x()
    {
        x_ = 0;
    }
    inline int32_t MessageOfProp::_internal_x() const
    {
        return x_;
    }
    inline int32_t MessageOfProp::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfProp.x)
        return _internal_x();
    }
    inline void MessageOfProp::_internal_set_x(int32_t value)
    {
        x_ = value;
    }
    inline void MessageOfProp::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfProp.x)
    }

    // int32 y = 3;
    inline void MessageOfProp::clear_y()
    {
        y_ = 0;
    }
    inline int32_t MessageOfProp::_internal_y() const
    {
        return y_;
    }
    inline int32_t MessageOfProp::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfProp.y)
        return _internal_y();
    }
    inline void MessageOfProp::_internal_set_y(int32_t value)
    {
        y_ = value;
    }
    inline void MessageOfProp::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfProp.y)
    }

    // double facing_direction = 4;
    inline void MessageOfProp::clear_facing_direction()
    {
        facing_direction_ = 0;
    }
    inline double MessageOfProp::_internal_facing_direction() const
    {
        return facing_direction_;
    }
    inline double MessageOfProp::facing_direction() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfProp.facing_direction)
        return _internal_facing_direction();
    }
    inline void MessageOfProp::_internal_set_facing_direction(double value)
    {
        facing_direction_ = value;
    }
    inline void MessageOfProp::set_facing_direction(double value)
    {
        _internal_set_facing_direction(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfProp.facing_direction)
    }

    // int64 guid = 5;
    inline void MessageOfProp::clear_guid()
    {
        guid_ = int64_t{0};
    }
    inline int64_t MessageOfProp::_internal_guid() const
    {
        return guid_;
    }
    inline int64_t MessageOfProp::guid() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfProp.guid)
        return _internal_guid();
    }
    inline void MessageOfProp::_internal_set_guid(int64_t value)
    {
        guid_ = value;
    }
    inline void MessageOfProp::set_guid(int64_t value)
    {
        _internal_set_guid(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfProp.guid)
    }

    // .protobuf.PlaceType place = 6;
    inline void MessageOfProp::clear_place()
    {
        place_ = 0;
    }
    inline ::protobuf::PlaceType MessageOfProp::_internal_place() const
    {
        return static_cast<::protobuf::PlaceType>(place_);
    }
    inline ::protobuf::PlaceType MessageOfProp::place() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfProp.place)
        return _internal_place();
    }
    inline void MessageOfProp::_internal_set_place(::protobuf::PlaceType value)
    {
        place_ = value;
    }
    inline void MessageOfProp::set_place(::protobuf::PlaceType value)
    {
        _internal_set_place(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfProp.place)
    }

    // -------------------------------------------------------------------

    // MessageOfPickedProp

    // .protobuf.PropType type = 1;
    inline void MessageOfPickedProp::clear_type()
    {
        type_ = 0;
    }
    inline ::protobuf::PropType MessageOfPickedProp::_internal_type() const
    {
        return static_cast<::protobuf::PropType>(type_);
    }
    inline ::protobuf::PropType MessageOfPickedProp::type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfPickedProp.type)
        return _internal_type();
    }
    inline void MessageOfPickedProp::_internal_set_type(::protobuf::PropType value)
    {
        type_ = value;
    }
    inline void MessageOfPickedProp::set_type(::protobuf::PropType value)
    {
        _internal_set_type(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfPickedProp.type)
    }

    // int32 x = 2;
    inline void MessageOfPickedProp::clear_x()
    {
        x_ = 0;
    }
    inline int32_t MessageOfPickedProp::_internal_x() const
    {
        return x_;
    }
    inline int32_t MessageOfPickedProp::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfPickedProp.x)
        return _internal_x();
    }
    inline void MessageOfPickedProp::_internal_set_x(int32_t value)
    {
        x_ = value;
    }
    inline void MessageOfPickedProp::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfPickedProp.x)
    }

    // int32 y = 3;
    inline void MessageOfPickedProp::clear_y()
    {
        y_ = 0;
    }
    inline int32_t MessageOfPickedProp::_internal_y() const
    {
        return y_;
    }
    inline int32_t MessageOfPickedProp::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfPickedProp.y)
        return _internal_y();
    }
    inline void MessageOfPickedProp::_internal_set_y(int32_t value)
    {
        y_ = value;
    }
    inline void MessageOfPickedProp::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfPickedProp.y)
    }

    // double facing_direction = 4;
    inline void MessageOfPickedProp::clear_facing_direction()
    {
        facing_direction_ = 0;
    }
    inline double MessageOfPickedProp::_internal_facing_direction() const
    {
        return facing_direction_;
    }
    inline double MessageOfPickedProp::facing_direction() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfPickedProp.facing_direction)
        return _internal_facing_direction();
    }
    inline void MessageOfPickedProp::_internal_set_facing_direction(double value)
    {
        facing_direction_ = value;
    }
    inline void MessageOfPickedProp::set_facing_direction(double value)
    {
        _internal_set_facing_direction(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfPickedProp.facing_direction)
    }

    // int64 mapping_id = 5;
    inline void MessageOfPickedProp::clear_mapping_id()
    {
        mapping_id_ = int64_t{0};
    }
    inline int64_t MessageOfPickedProp::_internal_mapping_id() const
    {
        return mapping_id_;
    }
    inline int64_t MessageOfPickedProp::mapping_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfPickedProp.mapping_id)
        return _internal_mapping_id();
    }
    inline void MessageOfPickedProp::_internal_set_mapping_id(int64_t value)
    {
        mapping_id_ = value;
    }
    inline void MessageOfPickedProp::set_mapping_id(int64_t value)
    {
        _internal_set_mapping_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfPickedProp.mapping_id)
    }

    // -------------------------------------------------------------------

    // MessageOfMap_Row

    // repeated .protobuf.PlaceType col = 1;
    inline int MessageOfMap_Row::_internal_col_size() const
    {
        return col_.size();
    }
    inline int MessageOfMap_Row::col_size() const
    {
        return _internal_col_size();
    }
    inline void MessageOfMap_Row::clear_col()
    {
        col_.Clear();
    }
    inline ::protobuf::PlaceType MessageOfMap_Row::_internal_col(int index) const
    {
        return static_cast<::protobuf::PlaceType>(col_.Get(index));
    }
    inline ::protobuf::PlaceType MessageOfMap_Row::col(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfMap.Row.col)
        return _internal_col(index);
    }
    inline void MessageOfMap_Row::set_col(int index, ::protobuf::PlaceType value)
    {
        col_.Set(index, value);
        // @@protoc_insertion_point(field_set:protobuf.MessageOfMap.Row.col)
    }
    inline void MessageOfMap_Row::_internal_add_col(::protobuf::PlaceType value)
    {
        col_.Add(value);
    }
    inline void MessageOfMap_Row::add_col(::protobuf::PlaceType value)
    {
        _internal_add_col(value);
        // @@protoc_insertion_point(field_add:protobuf.MessageOfMap.Row.col)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
        MessageOfMap_Row::col() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageOfMap.Row.col)
        return col_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfMap_Row::_internal_mutable_col()
    {
        return &col_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
        MessageOfMap_Row::mutable_col()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageOfMap.Row.col)
        return _internal_mutable_col();
    }

    // -------------------------------------------------------------------

    // MessageOfMap

    // repeated .protobuf.MessageOfMap.Row row = 2;
    inline int MessageOfMap::_internal_row_size() const
    {
        return row_.size();
    }
    inline int MessageOfMap::row_size() const
    {
        return _internal_row_size();
    }
    inline void MessageOfMap::clear_row()
    {
        row_.Clear();
    }
    inline ::protobuf::MessageOfMap_Row* MessageOfMap::mutable_row(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.MessageOfMap.row)
        return row_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>*
        MessageOfMap::mutable_row()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageOfMap.row)
        return &row_;
    }
    inline const ::protobuf::MessageOfMap_Row& MessageOfMap::_internal_row(int index) const
    {
        return row_.Get(index);
    }
    inline const ::protobuf::MessageOfMap_Row& MessageOfMap::row(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageOfMap.row)
        return _internal_row(index);
    }
    inline ::protobuf::MessageOfMap_Row* MessageOfMap::_internal_add_row()
    {
        return row_.Add();
    }
    inline ::protobuf::MessageOfMap_Row* MessageOfMap::add_row()
    {
        ::protobuf::MessageOfMap_Row* _add = _internal_add_row();
        // @@protoc_insertion_point(field_add:protobuf.MessageOfMap.row)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfMap_Row>&
        MessageOfMap::row() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageOfMap.row)
        return row_;
    }

    // -------------------------------------------------------------------

    // MessageToClient

    // repeated .protobuf.MessageOfHuman human_message = 1;
    inline int MessageToClient::_internal_human_message_size() const
    {
        return human_message_.size();
    }
    inline int MessageToClient::human_message_size() const
    {
        return _internal_human_message_size();
    }
    inline void MessageToClient::clear_human_message()
    {
        human_message_.Clear();
    }
    inline ::protobuf::MessageOfHuman* MessageToClient::mutable_human_message(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.MessageToClient.human_message)
        return human_message_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfHuman>*
        MessageToClient::mutable_human_message()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageToClient.human_message)
        return &human_message_;
    }
    inline const ::protobuf::MessageOfHuman& MessageToClient::_internal_human_message(int index) const
    {
        return human_message_.Get(index);
    }
    inline const ::protobuf::MessageOfHuman& MessageToClient::human_message(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.human_message)
        return _internal_human_message(index);
    }
    inline ::protobuf::MessageOfHuman* MessageToClient::_internal_add_human_message()
    {
        return human_message_.Add();
    }
    inline ::protobuf::MessageOfHuman* MessageToClient::add_human_message()
    {
        ::protobuf::MessageOfHuman* _add = _internal_add_human_message();
        // @@protoc_insertion_point(field_add:protobuf.MessageToClient.human_message)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfHuman>&
        MessageToClient::human_message() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageToClient.human_message)
        return human_message_;
    }

    // repeated .protobuf.MessageOfButcher butcher_message = 2;
    inline int MessageToClient::_internal_butcher_message_size() const
    {
        return butcher_message_.size();
    }
    inline int MessageToClient::butcher_message_size() const
    {
        return _internal_butcher_message_size();
    }
    inline void MessageToClient::clear_butcher_message()
    {
        butcher_message_.Clear();
    }
    inline ::protobuf::MessageOfButcher* MessageToClient::mutable_butcher_message(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.MessageToClient.butcher_message)
        return butcher_message_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfButcher>*
        MessageToClient::mutable_butcher_message()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageToClient.butcher_message)
        return &butcher_message_;
    }
    inline const ::protobuf::MessageOfButcher& MessageToClient::_internal_butcher_message(int index) const
    {
        return butcher_message_.Get(index);
    }
    inline const ::protobuf::MessageOfButcher& MessageToClient::butcher_message(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.butcher_message)
        return _internal_butcher_message(index);
    }
    inline ::protobuf::MessageOfButcher* MessageToClient::_internal_add_butcher_message()
    {
        return butcher_message_.Add();
    }
    inline ::protobuf::MessageOfButcher* MessageToClient::add_butcher_message()
    {
        ::protobuf::MessageOfButcher* _add = _internal_add_butcher_message();
        // @@protoc_insertion_point(field_add:protobuf.MessageToClient.butcher_message)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfButcher>&
        MessageToClient::butcher_message() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageToClient.butcher_message)
        return butcher_message_;
    }

    // repeated .protobuf.MessageOfProp prop_message = 3;
    inline int MessageToClient::_internal_prop_message_size() const
    {
        return prop_message_.size();
    }
    inline int MessageToClient::prop_message_size() const
    {
        return _internal_prop_message_size();
    }
    inline void MessageToClient::clear_prop_message()
    {
        prop_message_.Clear();
    }
    inline ::protobuf::MessageOfProp* MessageToClient::mutable_prop_message(int index)
    {
        // @@protoc_insertion_point(field_mutable:protobuf.MessageToClient.prop_message)
        return prop_message_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfProp>*
        MessageToClient::mutable_prop_message()
    {
        // @@protoc_insertion_point(field_mutable_list:protobuf.MessageToClient.prop_message)
        return &prop_message_;
    }
    inline const ::protobuf::MessageOfProp& MessageToClient::_internal_prop_message(int index) const
    {
        return prop_message_.Get(index);
    }
    inline const ::protobuf::MessageOfProp& MessageToClient::prop_message(int index) const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.prop_message)
        return _internal_prop_message(index);
    }
    inline ::protobuf::MessageOfProp* MessageToClient::_internal_add_prop_message()
    {
        return prop_message_.Add();
    }
    inline ::protobuf::MessageOfProp* MessageToClient::add_prop_message()
    {
        ::protobuf::MessageOfProp* _add = _internal_add_prop_message();
        // @@protoc_insertion_point(field_add:protobuf.MessageToClient.prop_message)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::protobuf::MessageOfProp>&
        MessageToClient::prop_message() const
    {
        // @@protoc_insertion_point(field_list:protobuf.MessageToClient.prop_message)
        return prop_message_;
    }

    // .protobuf.MessageOfMap map_massage = 4;
    inline bool MessageToClient::_internal_has_map_massage() const
    {
        return this != internal_default_instance() && map_massage_ != nullptr;
    }
    inline bool MessageToClient::has_map_massage() const
    {
        return _internal_has_map_massage();
    }
    inline void MessageToClient::clear_map_massage()
    {
        if (GetArenaForAllocation() == nullptr && map_massage_ != nullptr)
        {
            delete map_massage_;
        }
        map_massage_ = nullptr;
    }
    inline const ::protobuf::MessageOfMap& MessageToClient::_internal_map_massage() const
    {
        const ::protobuf::MessageOfMap* p = map_massage_;
        return p != nullptr ? *p : reinterpret_cast<const ::protobuf::MessageOfMap&>(::protobuf::_MessageOfMap_default_instance_);
    }
    inline const ::protobuf::MessageOfMap& MessageToClient::map_massage() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MessageToClient.map_massage)
        return _internal_map_massage();
    }
    inline void MessageToClient::unsafe_arena_set_allocated_map_massage(
        ::protobuf::MessageOfMap* map_massage
    )
    {
        if (GetArenaForAllocation() == nullptr)
        {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_massage_);
        }
        map_massage_ = map_massage;
        if (map_massage)
        {
        }
        else
        {
        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MessageToClient.map_massage)
    }
    inline ::protobuf::MessageOfMap* MessageToClient::release_map_massage()
    {
        ::protobuf::MessageOfMap* temp = map_massage_;
        map_massage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr)
        {
            delete old;
        }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr)
        {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::protobuf::MessageOfMap* MessageToClient::unsafe_arena_release_map_massage()
    {
        // @@protoc_insertion_point(field_release:protobuf.MessageToClient.map_massage)

        ::protobuf::MessageOfMap* temp = map_massage_;
        map_massage_ = nullptr;
        return temp;
    }
    inline ::protobuf::MessageOfMap* MessageToClient::_internal_mutable_map_massage()
    {
        if (map_massage_ == nullptr)
        {
            auto* p = CreateMaybeMessage<::protobuf::MessageOfMap>(GetArenaForAllocation());
            map_massage_ = p;
        }
        return map_massage_;
    }
    inline ::protobuf::MessageOfMap* MessageToClient::mutable_map_massage()
    {
        ::protobuf::MessageOfMap* _msg = _internal_mutable_map_massage();
        // @@protoc_insertion_point(field_mutable:protobuf.MessageToClient.map_massage)
        return _msg;
    }
    inline void MessageToClient::set_allocated_map_massage(::protobuf::MessageOfMap* map_massage)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr)
        {
            delete map_massage_;
        }
        if (map_massage)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protobuf::MessageOfMap>::GetOwningArena(map_massage);
            if (message_arena != submessage_arena)
            {
                map_massage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, map_massage, submessage_arena
                );
            }
        }
        else
        {
        }
        map_massage_ = map_massage;
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageToClient.map_massage)
    }

    // -------------------------------------------------------------------

    // MoveRes

    // int64 actual_speed = 1;
    inline void MoveRes::clear_actual_speed()
    {
        actual_speed_ = int64_t{0};
    }
    inline int64_t MoveRes::_internal_actual_speed() const
    {
        return actual_speed_;
    }
    inline int64_t MoveRes::actual_speed() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveRes.actual_speed)
        return _internal_actual_speed();
    }
    inline void MoveRes::_internal_set_actual_speed(int64_t value)
    {
        actual_speed_ = value;
    }
    inline void MoveRes::set_actual_speed(int64_t value)
    {
        _internal_set_actual_speed(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveRes.actual_speed)
    }

    // double actual_angle = 2;
    inline void MoveRes::clear_actual_angle()
    {
        actual_angle_ = 0;
    }
    inline double MoveRes::_internal_actual_angle() const
    {
        return actual_angle_;
    }
    inline double MoveRes::actual_angle() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveRes.actual_angle)
        return _internal_actual_angle();
    }
    inline void MoveRes::_internal_set_actual_angle(double value)
    {
        actual_angle_ = value;
    }
    inline void MoveRes::set_actual_angle(double value)
    {
        _internal_set_actual_angle(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveRes.actual_angle)
    }

    // -------------------------------------------------------------------

    // BoolRes

    // bool act_success = 1;
    inline void BoolRes::clear_act_success()
    {
        act_success_ = false;
    }
    inline bool BoolRes::_internal_act_success() const
    {
        return act_success_;
    }
    inline bool BoolRes::act_success() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BoolRes.act_success)
        return _internal_act_success();
    }
    inline void BoolRes::_internal_set_act_success(bool value)
    {
        act_success_ = value;
    }
    inline void BoolRes::set_act_success(bool value)
    {
        _internal_set_act_success(value);
        // @@protoc_insertion_point(field_set:protobuf.BoolRes.act_success)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message2Clients_2eproto
